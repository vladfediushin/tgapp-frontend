// src/pages/Authorize.tsx
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useSession } from '../store/session'
import { createUser, getUserByTelegramId } from '../api/api'
import { AxiosError } from 'axios'
import { UserOut } from '../api/api'

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥–∞–º–∏
const EXAM_COUNTRIES = [
  { value: 'am', label: 'üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è' },
  { value: 'kz', label: 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  { value: 'by', label: 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å' },
]

// –Ø–∑—ã–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const EXAM_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
]
const UI_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
]

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–æ–≤ –Ω–∞ Vercel
function logToVercel(message: string) {
  fetch('/api/logs', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ message }),
  }).catch(console.error)
}

const Authorize: React.FC = () => {
  const navigate = useNavigate()
  const setInternalId = useSession(state => state.setUserId)

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ: checking ‚Äî –∂–¥—ë–º API, form ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, complete ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—É—Å–ø–µ—Ö"
  const [step, setStep] = useState<'checking' | 'form' | 'complete'>('checking')

  const [userName, setUserName] = useState('–¥—Ä—É–≥')
  const [examCountry, setExamCountry] = useState('')
  const [examLanguage, setExamLanguage] = useState('')
  const [uiLanguage, setUiLanguage] = useState('ru')
  const [error, setError] = useState('')

  useEffect(() => {
    const init = async () => {
      const tg = window.Telegram?.WebApp
      const tgUser = tg?.initDataUnsafe?.user

      if (!tg || !tgUser) {
        // –Ω–µ WebApp –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –Ω–∞ Home
        return navigate('/home')
      }

      tg.ready()
      tg.expand()
      setUserName(tgUser.first_name || '–¥—Ä—É–≥')

      try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        const res = await getUserByTelegramId(tgUser.id)
        const user: UserOut = res.data
        logToVercel(`[AUTH] Existing user id=${user.id}`)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –∏ —Å—Ä–∞–∑—É —É—Ö–æ–¥–∏–º –Ω–∞ Home
        setInternalId(user.id)
        navigate('/home')
      } catch (err) {
        const axiosErr = err as AxiosError
        if (axiosErr.response?.status === 404) {
          // 404 ‚Äî –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
          setStep('form')
        } else {
          // –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
          setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
          console.error('[AUTH] checkUser error', axiosErr)
        }
      }
    }

    init()
  }, [navigate, setInternalId])

  const handleSubmit = async () => {
    if (!examCountry || !examLanguage) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    setError('')
    setStep('complete')

    const tg = window.Telegram?.WebApp
    const tgUser = tg?.initDataUnsafe?.user
    if (!tgUser) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram')
      return
    }

    try {
      const res = await createUser({
        telegram_id: tgUser.id,
        username: tgUser.username || undefined,
        first_name: tgUser.first_name || undefined,
        last_name: tgUser.last_name || undefined,
        exam_country: examCountry,
        exam_language: examLanguage,
        ui_language: uiLanguage,
      })
      logToVercel(`[AUTH] Created user id=${res.data.id}`)

      setInternalId(res.data.id)
      navigate('/home')
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      console.error('[AUTH] createUser error', err)
      setStep('form')
    }
  }

  if (step === 'checking') {
    return <div style={{ padding: 20 }}>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
  }
  if (step === 'complete') {
    return <div style={{ padding: 20 }}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞...</div>
  }

  // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É, –∫–æ–≥–¥–∞ step === 'form'
  return (
    <div style={{ padding: 20 }}>
      <h2>–ü—Ä–∏–≤–µ—Ç, {userName}! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:</h2>

      <label>
        –°—Ç—Ä–∞–Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞
        <select
          value={examCountry}
          onChange={e => setExamCountry(e.target.value)}
          style={{ display: 'block', margin: '8px 0' }}
        >
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>
          {EXAM_COUNTRIES.map(c => (
            <option key={c.value} value={c.value}>{c.label}</option>
          ))}
        </select>
      </label>

      <label>
        –Ø–∑—ã–∫ —ç–∫–∑–∞–º–µ–Ω–∞
        <select
          value={examLanguage}
          onChange={e => setExamLanguage(e.target.value)}
          style={{ display: 'block', margin: '8px 0' }}
        >
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>
          {EXAM_LANGUAGES.map(l => (
            <option key={l.value} value={l.value}>{l.label}</option>
          ))}
        </select>
      </label>

      <label>
        –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        <select
          value={uiLanguage}
          onChange={e => setUiLanguage(e.target.value)}
          style={{ display: 'block', margin: '8px 0' }}
        >
          {UI_LANGUAGES.map(l => (
            <option key={l.value} value={l.value}>{l.label}</option>
          ))}
        </select>
      </label>

      {error && <div style={{ color: 'red', marginTop: 8 }}>{error}</div>}

      <button
        onClick={handleSubmit}
        style={{
          display: 'block',
          marginTop: 20,
          padding: '10px',
          width: '100%',
          backgroundColor: '#2AABEE',
          color: 'white',
          border: 'none',
          borderRadius: 8,
          fontSize: 16,
        }}
      >
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      </button>
    </div>
  )
}

export default Authorize