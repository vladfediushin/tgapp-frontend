// src/pages/Authorize.tsx
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useSession } from '../store/session'
import { createUser, getUserByTelegramId, getTopics } from '../api/api'
import { AxiosError } from 'axios'
import { UserOut } from '../api/api'
import { useTranslation } from 'react-i18next'
import i18n from 'i18next'
import ExamSettingsComponent from '../components/ExamSettingsComponent'  // Import the component

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
const EXAM_COUNTRIES = [
  { value: 'am', label: 'üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è' },
  { value: 'kz', label: 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  { value: 'by', label: 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å' },
]

// –Ø–∑—ã–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const EXAM_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
]
const UI_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
]

const Authorize: React.FC = () => {
  const { t } = useTranslation()
  const navigate = useNavigate()

  // –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥ –∏–∑ Telegram –∏ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç
  const tgUserInit = window.Telegram?.WebApp?.initDataUnsafe?.user
  const rawLang = tgUserInit?.language_code?.split('-')[0] ?? ''
  const hasLang = UI_LANGUAGES.some(l => l.value === rawLang)
  const defaultUiLang = hasLang ? rawLang : 'en'

  // —ç–∫—à–µ–Ω—ã —Å—Ç–æ—Ä–∞
  const setInternalId        = useSession(state => state.setUserId)
  const setStoreExamCountry  = useSession(state => state.setExamCountry)
  const setStoreExamLanguage = useSession(state => state.setExamLanguage)
  const setStoreUiLanguage   = useSession(state => state.setUiLanguage)
  const setTopics            = useSession(state => state.setTopics)

  const [step, setStep]         = useState<'checking' | 'form' | 'exam_settings' | 'complete'>('checking')
  const [userName, setUserName] = useState('–¥—Ä—É–≥')

  // –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–µ–π—Ç—ã –¥–ª—è —Ñ–æ—Ä–º—ã
  const [examCountryInput, setExamCountryInput]   = useState<string>('')
  const [examLanguageInput, setExamLanguageInput] = useState<string>('')
  const [uiLanguageInput, setUiLanguageInput]     = useState<string>(defaultUiLang)

  // State to track if user is new (needs to see exam settings)
  const [isNewUser, setIsNewUser] = useState(false)

  const [error, setError] = useState('')

  // –º–µ–Ω—è–µ–º —è–∑—ã–∫ i18next –Ω–∞ —Ç–æ—Ç, —á—Ç–æ –∏–∑ Telegram (–∏–ª–∏ en), –∏ –∑–∞—Ç–µ–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤ —Ñ–æ—Ä–º–µ
  useEffect(() => {
    i18n.changeLanguage(uiLanguageInput)
  }, [uiLanguageInput])

  // –ü–µ—Ä–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
  useEffect(() => {
    const init = async () => {
      const tg = window.Telegram?.WebApp
      const tgUser = tg?.initDataUnsafe?.user
      if (!tg || !tgUser) {
        setStep('complete')
        return
      }

      tg.ready()
      tg.expand()
      setUserName(tgUser.first_name || '–¥—Ä—É–≥')

      try {
        const res = await getUserByTelegramId(tgUser.id)
        const user: UserOut = res.data

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–æ—Ä
        setInternalId(user.id)
        setStoreExamCountry(user.exam_country  ?? '')
        setStoreExamLanguage(user.exam_language ?? '')
        setStoreUiLanguage(user.ui_language     ?? '')

        // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã
        const topicsRes = await getTopics(
          user.exam_country  ?? '',
          user.exam_language ?? ''
        )
        setTopics(topicsRes.data.topics)

        // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Home - existing user
        setStep('complete')
      } catch (err) {
        const axiosErr = err as AxiosError
        if (axiosErr.response?.status === 404) {
          // New user - show form
          setIsNewUser(true)
          setStep('form')
        } else {
          setError(t('authorize.error.checkUser'))
          setStep('form')
        }
      }
    }
    init()
  }, [
    t,
    setInternalId,
    setStoreExamCountry,
    setStoreExamLanguage,
    setStoreUiLanguage,
    setTopics,
  ])

  // –ö–æ–≥–¥–∞ step —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è complete ‚Äî –¥–µ–ª–∞–µ–º navigate
  useEffect(() => {
    if (step === 'complete') {
      navigate('/home', { replace: true })
    }
  }, [step, navigate])

  const handleSubmit = async () => {
    if (!examCountryInput || !examLanguageInput) {
      setError(t('authorize.error.requiredFields'))
      return
    }
    setError('')

    const tg = window.Telegram?.WebApp
    const tgUser = tg?.initDataUnsafe?.user
    if (!tgUser) {
      setError(t('authorize.error.telegramData'))
      setStep('form')
      return
    }

    try {
      const res = await createUser({
        telegram_id: tgUser.id,
        username: tgUser.username || undefined,
        first_name: tgUser.first_name || undefined,
        last_name: tgUser.last_name || undefined,
        exam_country: examCountryInput,
        exam_language: examLanguageInput,
        ui_language: uiLanguageInput,
        // exam_date and daily_goal are optional - will be set in next step
      })

      setInternalId(res.data.id)
      setStoreExamCountry(res.data.exam_country  ?? '')
      setStoreExamLanguage(res.data.exam_language ?? '')
      setStoreUiLanguage(res.data.ui_language     ?? '')

      // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–º—ã
      const topicsRes = await getTopics(
        res.data.exam_country  ?? '',
        res.data.exam_language ?? ''
      )
      setTopics(topicsRes.data.topics)

      // Show exam settings step for new users
      setStep('exam_settings')
    } catch {
      setError(t('authorize.error.createUser'))
      setStep('form')
    }
  }

  const handleExamSettingsSave = () => {
    // User saved exam settings, move to complete
    setStep('complete')
  }

  const handleSkipExamSettings = () => {
    // User skipped exam settings, move to complete
    setStep('complete')
  }

  if (step === 'checking') {
    return <div style={{ padding: 20 }}>{t('authorize.checking')}</div>
  }
  
  if (step === 'form') {
    return (
      <div style={{ padding: 20 }}>
        <h2>{t('authorize.greeting', { name: userName })}</h2>

        <label>
          {t('authorize.examCountryLabel')}
          <select
            value={examCountryInput}
            onChange={e => setExamCountryInput(e.target.value)}
            style={{ display: 'block', margin: '8px 0' }}
          >
            <option value="">{t('authorize.selectPlaceholder')}</option>
            {EXAM_COUNTRIES.map(c => (
              <option key={c.value} value={c.value}>{c.label}</option>
            ))}
          </select>
        </label>

        <label>
          {t('authorize.examLanguageLabel')}
          <select
            value={examLanguageInput}
            onChange={e => setExamLanguageInput(e.target.value)}
            style={{ display: 'block', margin: '8px 0' }}
          >
            <option value="">{t('authorize.selectPlaceholder')}</option>
            {EXAM_LANGUAGES.map(l => (
              <option key={l.value} value={l.value}>{l.label}</option>
            ))}
          </select>
        </label>

        <label>
          {t('authorize.uiLanguageLabel')}
          <select
            value={uiLanguageInput}
            onChange={e => setUiLanguageInput(e.target.value)}
            style={{ display: 'block', margin: '8px 0' }}
          >
            {UI_LANGUAGES.map(l => (
              <option key={l.value} value={l.value}>{l.label}</option>
            ))}
          </select>
        </label>

        {error && <div style={{ color: 'red', marginTop: 8 }}>{error}</div>}

        <button
          onClick={handleSubmit}
          style={{
            display: 'block',
            marginTop: 20,
            padding: '10px',
            width: '100%',
            backgroundColor: '#2AABEE',
            color: 'white',
            border: 'none',
            borderRadius: 8,
            fontSize: 16,
          }}
        >
          {t('authorize.submit')}
        </button>
      </div>
    )
  }

  if (step === 'exam_settings') {
    return (
      <div style={{ padding: 20 }}>
        <h2>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, {userName}!</h2>
        <p style={{ marginBottom: 20, color: '#666' }}>
          –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞—Ç—É —ç–∫–∑–∞–º–µ–Ω–∞ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é 
          —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–º–ø –∏–∑—É—á–µ–Ω–∏—è. –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ‚Äî 
          –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏—Ö –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ.
        </p>

        {/* Embed the ExamSettingsComponent */}
        <ExamSettingsComponent 
          showTitle={false} 
          compact={true}
          onSave={handleExamSettingsSave}
        />

        <button
          onClick={handleSkipExamSettings}
          style={{
            display: 'block',
            width: '100%',
            padding: '10px',
            marginTop: '15px',
            backgroundColor: '#f5f5f5',
            color: '#666',
            border: '1px solid #ccc',
            borderRadius: 8,
            fontSize: 16,
            cursor: 'pointer'
          }}
        >
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ)
        </button>
      </div>
    )
  }

  return null
}

export default Authorize