import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useSession } from '../store/session'
import { getUserStats, UserStats, getQuestions, QuestionOut } from '../api/api'

const EXAM_COUNTRIES = [
  { value: 'am', label: 'üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è' },
  { value: 'kz', label: 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  { value: 'by', label: 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å' },
]
const EXAM_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
]
const UI_LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
]

const Profile: React.FC = () => {
  const navigate = useNavigate()
  const userId = useSession(state => state.userId)
  const examCountry = useSession(state => state.examCountry)
  const examLanguage = useSession(state => state.examLanguage)
  const uiLanguage = useSession(state => state.uiLanguage)

  const setExamCountry = useSession(state => state.setExamCountry)
  const setExamLanguage = useSession(state => state.setExamLanguage)
  const setUiLanguage = useSession(state => state.setUiLanguage)

  const [stats, setStats] = useState<UserStats | null>(null)
  const [dueCount, setDueCount] = useState<number | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!userId) return
    setLoading(true)
    // fetch aggregated stats
    getUserStats(userId)
      .then(res => setStats(res.data))
      .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err))
      .finally(() => setLoading(false))
    // fetch count of questions ready for repeat
    getQuestions({ user_id: userId, mode: 'interval', country: examCountry, language: examLanguage })
      .then(res => setDueCount(res.data.length))
      .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', err))
  }, [userId, examCountry, examLanguage])

  const handleBack = () => navigate('/home')

  if (loading || stats === null || dueCount === null) {
    return <div style={{ padding: 20 }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>
  }

  const { total_questions, answered, correct } = stats
  const incorrect = answered - correct
  const unanswered = total_questions - answered

  return (
    <div style={{ padding: 20 }}>
      <h2>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <section style={{ marginBottom: 24 }}>
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        <label style={{ display: 'block', margin: '8px 0' }}>
          –°—Ç—Ä–∞–Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞
          <select
            value={examCountry}
            onChange={e => setExamCountry(e.target.value)}
            style={{ display: 'block', marginTop: 4 }}
          >
            {EXAM_COUNTRIES.map(c => (
              <option key={c.value} value={c.value}>
                {c.label}
              </option>
            ))}
          </select>
        </label>
        <label style={{ display: 'block', margin: '8px 0' }}>
          –Ø–∑—ã–∫ —ç–∫–∑–∞–º–µ–Ω–∞
          <select
            value={examLanguage}
            onChange={e => setExamLanguage(e.target.value)}
            style={{ display: 'block', marginTop: 4 }}
          >
            {EXAM_LANGUAGES.map(l => (
              <option key={l.value} value={l.value}>
                {l.label}
              </option>
            ))}
          </select>
        </label>
        <label style={{ display: 'block', margin: '8px 0' }}>
          –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          <select
            value={uiLanguage}
            onChange={e => setUiLanguage(e.target.value)}
            style={{ display: 'block', marginTop: 4 }}
          >
            {UI_LANGUAGES.map(l => (
              <option key={l.value} value={l.value}>
                {l.label}
              </option>
            ))}
          </select>
        </label>
      </section>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <section style={{ marginBottom: 24 }}>
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}</div>
        <div>–û—Ç–≤–µ—á–µ–Ω–æ: {answered}</div>
        <div>–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}</div>
        <div>–û—à–∏–±–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}</div>
        <div>–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {unanswered}</div>
        <div>–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {dueCount}</div>
      </section>

      <button
        onClick={handleBack}
        style={{
          display: 'block',
          width: '100%',
          padding: '12px',
          backgroundColor: '#ECECEC',
          border: '1px solid #CCC',
          borderRadius: '8px',
          fontSize: '16px',
          cursor: 'pointer',
        }}
      >
        –ù–∞–∑–∞–¥
      </button>
    </div>
  )
}

export default Profile
